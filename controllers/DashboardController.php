<?php
/**
 *
 * @package    Material Dashboard Yii2
 * @author     CodersEden <hello@coderseden.com>
 * @link       https://www.coderseden.com
 * @copyright  2020 Material Dashboard Yii2 (https://www.coderseden.com)
 * @license    MIT - https://www.coderseden.com
 * @since      1.0
 */
namespace app\controllers;
use Yii;
use app\models\User;
use app\models\Stock;
use app\models\Subscribers;
use app\models\SubscribersSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use app\components\AccessRule;
use app\components\Api;
use yii\data\ArrayDataProvider;
use yii2tech\csvgrid\CsvGrid;

/**
 * Class DashboardController
 * @package app\controllers
 */
class DashboardController extends \yii\web\Controller
{
    public $layout = 'business';

    public function beforeAction( $action )
	{
		if ( \Yii::$app->getUser()->isGuest ) {
			return \Yii::$app->getResponse()->redirect( \yii\helpers\Url::to(['/site/login']) )->send();
		}
		return parent::beforeAction( $action ); // TODO: Change the autogenerated stub
	}
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
            'access' => [
                'class' => AccessControl::className(),
                // We will override the default rule config with the new AccessRule class
                'ruleConfig' => [
                    'class' => AccessRule::className(),
                ],
                'only' => ['index','create', 'update', 'delete', 'export'],
                'rules' => [
                    [
                        'allow' => true,
                        'actions' => ['index', 'create', 'export', 'update'],
                        // Allow finance and admins to create and update
                        'roles' => [
                               User::ROLE_CUSTOMER,
                        ],
                    ],
                    [
                        'actions' => ['index', 'create', 'update', 'delete'],
                        'allow' => true,
                        // Allow admins to delete
                        'roles' => [
                            User::ROLE_ADMIN
                        ],
                    ],
                ],
            ]
        ];
    }

    /**
     * Lists all Finance models.
     * @return mixed
     */
    public function actionIndex()
    {
        $model = new Stock();
        $name1 = Stock::find()->where(['id' => [1]])->all();
        $badge1 = Stock::find()->where(['id' => [1]])->all();
        $following1 = Stock::find()->where(['id' => [1]])->all();
        $percentage1 = Stock::find()->where(['id' => [1]])->all();
        $name2 = Stock::find()->where(['id' => [2]])->all();
        $badge2 = Stock::find()->where(['id' => [2]])->all();
        $arrow2 = Stock::find()->where(['id' => [2]])->all();
        $following2 = Stock::find()->where(['id' => [2]])->all();
        $percentage2 = Stock::find()->where(['id' => [2]])->all();
        $name3 = Stock::find()->where(['id' => [3]])->all();
        $badge3 = Stock::find()->where(['id' => [3]])->all();
        $following3 = Stock::find()->where(['id' => [3]])->all();
        $percentage3 = Stock::find()->where(['id' => [3]])->all();
        $name4 = Stock::find()->where(['id' => [4]])->all();
        $badge4 = Stock::find()->where(['id' => [4]])->all();
        $following4 = Stock::find()->where(['id' => [4]])->all();
        $percentage4 = Stock::find()->where(['id' => [4]])->all();
        $name5 = Stock::find()->where(['id' => [5]])->all();
        $badge5 = Stock::find()->where(['id' => [5]])->all();
        $following5 = Stock::find()->where(['id' => [5]])->all();
        $percentage5 = Stock::find()->where(['id' => [5]])->all();
        $role = \Yii::$app->user->identity->role;
        $searchModel = new SubscribersSearch();
        $dataProvider = $searchModel->search(\Yii::$app->getRequest()->queryParams);
	    $uuid = \Yii::$app->user->identity->uuid;
	    $start = isset($_COOKIE['start']) ? $_COOKIE['start'] : 0;
	    $end = isset($_COOKIE['end']) ? $_COOKIE['end'] : 0;
	    $offset = 0;
        $subscribers = Yii::$app->db2->createCommand("SELECT * FROM users")->queryOne();
	    $token = Api::getToken();
	    $info = Api::getInfo($uuid, $token, $start, $end);
	    $chart = Api::getChart($uuid, $token, $start, $end);
	    $data = Api::getTransactions($uuid, $token, $start, $end, $offset, 3);
	    $topups = Api::getTopups($uuid, $token, $start, $end, $offset, 5);

            $dataProvider = new ArrayDataProvider([
                'allModels' => $data,
                'key' => 'id',
                'pagination' => [
                    'pageSize' => 10,
                ],
            ]);
   	    return $this->render('index', [
	        'balance' => $info != null && isset($info["balance"]) ? $info["balance"] : "0",
	        'customers' => $info != null && isset($info["customers"]) ? $info["customers"] : "0",
	        'customers_growth' => $info != null && isset($info["customers_growth"]) ? $info["customers_growth"] : "+0%",
	        'commission' => $info != null && isset($info["revenue"]) ? $info["revenue"] : "0",
	        'float_growth' => $info != null && isset($info["float_growth"]) ? $info["float_growth"] : "+0%",
	        'pending' => $info != null && isset($info["pending"]) ? $info["pending"] : "0",
	        'success' => $info != null && isset($info["success"]) ? $info["success"] : "99%",
	        'transactions_growth' => $info != null && isset($info["transactions_growth"]) ? $info["transactions_growth"] : "+0%",
	        'revenue_growth' => $info != null && isset($info["revenue_growth"]) ? $info["revenue_growth"] : "+0%",
	        'volume' => $info != null && isset($info["volume"]) ? $info["volume"] : "0",
	        'volume_growth' => $info != null && isset($info["volume_growth"]) ? $info["volume_growth"] : "+0%",
	        'chart' => json_encode($chart),
	        'data' => json_encode($data),
	        'dataProvider' => $dataProvider,
	        'topups' => json_encode($topups),
            'role' => $role,
            'name1' => $name1,
            'badge1' => $badge1,
            'following1' => $following1,
            'percentage1' => $percentage1,
            'name2' => $name2,
            'badge2' => $badge2,
            'arrow2' => $arrow2,
            'following2' => $following2,
            'percentage2' => $percentage2,
            'name3' => $name3,
            'badge3' => $badge3,
            'following3' => $following3,
            'percentage3' => $percentage3,
            'name4' => $name4,
            'badge4' => $badge4,
            'following4' => $following4,
            'percentage4' => $percentage4,
            'name5' => $name5,
            'badge5' => $badge5,
            'following5' => $following5,
            'percentage5' => $percentage5,
            'model' => $model,

            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            ]);
    }


    /**
    * Export action.
    *
    * @return Response|string
    */
    public function actionExport() {
	$data = json_decode(Yii::$app->request->post('data', null));
        $dataProvider = new ArrayDataProvider([
	    'allModels' => $data,
	    'pagination' => [
	       'pageSize' => 10,
	     ],
	]);
 	$exporter = new CsvGrid([
	   'dataProvider' => $dataProvider,
	   'columns' => [
		   'trxId',
		   'account',
		   'name',
		   'currency',
		   'amount',
		   'reference',
		   'response'
	   ]
   	]);

        $time = (int) round(microtime(true) * 1000);
        $exporter->export()->send("transaction-{$time}.csv");
    }

    public function actionSubscribersExport() {
        $searchModel = new SubscribersSearch();
        $dataProvider = $searchModel->search(\Yii::$app->getRequest()->queryParams);
         $exporter = new CsvGrid([
           'dataProvider' => $dataProvider,
           'columns' => [
               'id',
               'email',
               'phonenumber',
               'status',
               'created',
           ]
           ]);
    
            $time = (int) round(microtime(true) * 1000);
            $exporter->export()->send("subscribers-{$time}.csv");
        }

}
