<?php

namespace app\controllers;

use Yii;
use app\models\User;
use app\components\AccessRule;
use app\models\PaymentStatus;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use yii2tech\csvgrid\CsvGrid;
use yii2tech\spreadsheet\Spreadsheet;
use yii\data\ArrayDataProvider;
use yii\data\ActiveDataProvider;
use yii\db\Query;

use app\components\Api;


class InvestmentsController extends Controller
{
    public $layout = 'business';

    public function beforeAction( $action )
    {
		if ( \Yii::$app->getUser()->isGuest ) {
			return \Yii::$app->getResponse()->redirect( \yii\helpers\Url::to(['/site/login']) )->send();
		}
		return parent::beforeAction( $action ); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
            'access' => [
                'class' => AccessControl::className(),
                // We will override the default rule config with the new AccessRule class
                'ruleConfig' => [
                    'class' => AccessRule::className(),
                ],
                'only' => ['index','create', 'update', 'delete'],
                'rules' => [
                    [
                        'allow' => true,
                        'actions' => ['index', 'create', 'update'],
                        // Allow finance and admins to create and update
                        'roles' => [
 			       User::ROLE_CUSTOMER,
                               User::ROLE_SHOP,
                               User::ROLE_MERCHANT,
                               User::ROLE_ADMIN
                        ],
                    ],
                    
                    [
                        'actions' => ['delete'],
                        'allow' => true,
                        // Allow admins to delete
                        'roles' => [
                            User::ROLE_ADMIN
                        ],
                    ],
                ],
                'denyCallback' => function($rule, $action) {
                    //redirection here
                    return Yii::$app->getResponse()->redirect(['/site/about']);
               }
            ]
        ];
    }

 
    public function actionIndex($id = null, $admin = false)
    {
    if($admin) $uuid = ""; else $uuid = isset($id) ? $id : \Yii::$app->user->identity->uuid;
	$start = isset($_COOKIE['start']) ? $_COOKIE['start'] : 0;
        $end = isset($_COOKIE['end']) ? $_COOKIE['end'] : 0;
	$offset = 0;
	$limit = 100;

	$token = Api::getToken();    
	$success = Api::getSuccessfulTransactions($uuid, $token, $start, $end, $limit);
     	$data = Api::getTransactions($uuid, $token, $start, $end, $offset, $limit);
	$dataProvider = new ArrayDataProvider([
    		'allModels' => $data,
	   	'key' => 'id',
    		'pagination' => [
        		'pageSize' => 10,
    		],
        ]);
   	return $this->render('index', [
            'dataProvider' => $dataProvider,
	    'data' => json_encode($data),
	    'success' => $success
        ]);
    }


    /**
     * Displays a single Mytransactions model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($tid, $pid)
    {
	$uuid = \Yii::$app->user->identity->uuid;
	$token = Api::getToken();
	$data = Api::getTransaction($uuid, $token, $tid, $pid);
   	return $this->render('view', [
            'model' => $data,
        ]);
    }

   public function actionExport() {
       	$data = json_decode(Yii::$app->request->post('data', null));
        $dataProvider = new ArrayDataProvider([
            'allModels' => $data,
            'pagination' => [
               'pageSize' => 10,
             ],
        ]);
        $exporter = new CsvGrid([
           'dataProvider' => $dataProvider,
           'columns' => [
	        'trxId',
                'account',
                'name',
                'currency',
                'amount',
		'currency',
                [
                    'label' => 'Commission',
                    'value' => function ($model) {
                        return isset($model->status) && $model->status == 20 ? $model->comm : 0;
                    }
                ],
                [
                    'label' => 'Reference',
                    'value' => function ($model) {
                        return isset($model->reference) ? $model->reference : "";
                    }
                ],
                [
                    'label' => 'Response',
                    'value' => function ($model) {
                        return isset($model->response) ? $model->response : "";
                    }
                ]
           ]
	]);

	$time = (int) round(microtime(true) * 1000);
        $exporter->export()->send("transaction-{$time}.csv");
    }

     /**
     * Searches Transaction models.
     * @return mixed
     */

    public function actionSearch($q)
    {
        $uuid = \Yii::$app->user->identity->uuid;
        $start = isset($_COOKIE['start']) ? $_COOKIE['start'] : 0;
        $end = isset($_COOKIE['end']) ? $_COOKIE['end'] : 0;
        $offset = 0;
        $limit = 100;

        $token = Api::getToken();
        $success = Api::getSuccessfulTransactions($uuid, $token, $start, $end, $limit);
        $data = Api::searchTransactions($uuid, $token, $q);
        $dataProvider = new ArrayDataProvider([
                'allModels' => $data,
                'key' => 'id',
                'pagination' => [
                        'pageSize' => 10,
                ],
        ]);
        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'data' => json_encode($data),
            'success' => $success
        ]);
    }

    /**
     * Creates a new Mytransactions model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Transactions();
        $model->inserted_by = \Yii::$app->user->identity->firstname;
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id_mytransactions]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing Mytransactions model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id_mytransactions]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing Mytransactions model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

     protected function findModel($id)
    {
        if (($model = json::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

}
