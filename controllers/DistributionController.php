<?php

namespace app\controllers;

use Yii;
use app\models\Audit;
use app\models\Topup;
use app\models\Topups;
use app\models\TopupsSearch;
use app\models\User;
use app\components\AccessRule;
use app\models\PaymentStatus;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use yii2tech\csvgrid\CsvGrid;
use yii2tech\spreadsheet\Spreadsheet;
use yii\data\ArrayDataProvider;
use yii\data\ActiveDataProvider;
use yii\db\Query;

use app\components\Api;

/**
 * MytopupsController implements the CRUD actions for Mytopups model.
 */
class DistributionController extends Controller
{
    public $layout = 'business';

    public function beforeAction( $action )
	{
		if ( \Yii::$app->getUser()->isGuest) {
			return \Yii::$app->getResponse()->redirect( \yii\helpers\Url::to(['/site/login']) )->send();
		}
		return parent::beforeAction( $action ); // TODO: Change the autogenerated stub
	}
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
            'access' => [
                'class' => AccessControl::className(),
                // We will override the default rule config with the new AccessRule class
                'ruleConfig' => [
                    'class' => AccessRule::className(),
                ],
                'only' => ['index','create', 'update', 'delete'],
                'rules' => [
                    [
                        'allow' => true,
                        'actions' => ['index', 'create', 'update'],
                        // Allow finance and admins to create and update
                        'roles' => [
				User::ROLE_CUSTOMER,
				User::ROLE_MERCHANT,
                                User::ROLE_ADMIN
                        ],
                    ],
                    
                    [
                        'actions' => ['delete'],
                        'allow' => true,
                        // Allow admins to delete
                        'roles' => [
                            User::ROLE_ADMIN
                        ],
                    ],
                ],
                'denyCallback' => function($rule, $action) {
                    //redirection here
                    return Yii::$app->getResponse()->redirect(['/site/admin']);
               }
            ]
        ];
    }

    /**
     * Lists all Mytopups models.
     * @return mixed
     */

    public function actionIndex($id = null, $admin = false)
    {
	if($admin) $uuid = ""; else $uuid = isset($id) ? $id : \Yii::$app->user->identity->uuid;
	$start = isset($_COOKIE['start']) ? $_COOKIE['start'] : 0;
        $end = isset($_COOKIE['end']) ? $_COOKIE['end'] : 0;
	$offset = 0;
	$limit = 100;
	$token = Api::getToken();
	$balance = "0";
	$pending = Api::getPendingTopups($uuid, $token, $start, $end, $limit);
	$data = Api::getTopups($uuid, $token, $start, $end, $offset, $limit);
	$dataProvider = new ArrayDataProvider([
    		'allModels' => $data,
	   	'key' => 'id',
    		'pagination' => [
        		'pageSize' => 10,
    		],
        ]);
   	return $this->render('index', [
     'dataProvider' => $dataProvider,
	 'data' => json_encode($data),
	 'balance' => $balance,
	 'topup' => new Topup(),
	 'pending' => $pending,
	 'admin' => $admin
        ]);
    }


    /**
     * Displays a single Mytopups model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($tid, $pid)
    {
	$start = isset($_COOKIE['start']) ? $_COOKIE['start'] : 0;
        $end = isset($_COOKIE['end']) ? $_COOKIE['end'] : 0;    
	$offset = 0;
	$limit = 100;
	$uuid = \Yii::$app->user->identity->uuid;
	$token = Api::getToken();
	$data = Api::getTopups($uuid, $token, $start, $end, $offset, $limit);
   	return $this->render('view', [
            'model' => $data,
        ]);
    }

     /**
     * Searches Topup models.
     * @return mixed
     */
    public function actionSearch($q = null)
    {
        $uuid = \Yii::$app->user->identity->uuid;
        $start = isset($_COOKIE['start']) ? $_COOKIE['start'] : 0;
        $end = isset($_COOKIE['end']) ? $_COOKIE['end'] : 0;
        $offset = 0;
        $limit = 100;

        if(!isset($q) && isset($_GET["q"]))
          $q = $_GET["q"];

        $token = Api::getToken();
        $pending = Api::getPendingTopups($uuid, $token, $start, $end, $limit);
        $data = Api::searchTopups($uuid, $token, $q);
        $dataProvider = new ArrayDataProvider([
                'allModels' => $data,
                'key' => 'id',
                'pagination' => [
                        'pageSize' => 10,
                ],
        ]);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            $message = 'Topup created';

            // audit trail
            Audit::trail('Topup', 'Create', $model->id, $message);

            Yii::$app->getSession()->setFlash('success', Yii::t('usuario', $message));
            return $this->redirect(['update', 'id' => $model->id]);
        }

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'data' => json_encode($data),
            'pending' => $pending
        ]);
    }


   public function actionExport() {
       	$data = json_decode(Yii::$app->request->post('data', null));
        $dataProvider = new ArrayDataProvider([
            'allModels' => $data,
            'pagination' => [
               'pageSize' => 10,
             ],
        ]);
        $exporter = new CsvGrid([
           'dataProvider' => $dataProvider,
           'columns' => [
		   'type',
                   'currency',
                   'amount',
		   'balance',
		   [
                    'label' => 'Reference',
                    'attribute' => '_abstract'
                   ],
                   'createTime'
           ]
	]);

	$time = (int) round(microtime(true) * 1000);
        $exporter->export()->send("topup-{$time}.csv");
    }

    public function actionApprove($id, $ref, $amount)
    {
        if(!Yii::$app->user->can('admin'))
		return \Yii::$app->getResponse()->redirect( \yii\helpers\Url::to(['/site/admin']) )->send();

        $token = Api::getToken();

        $start = isset($_COOKIE['start']) ? $_COOKIE['start'] : 0;
        $end = isset($_COOKIE['end']) ? $_COOKIE['end'] : 0;
        $offset = 0;
        $limit = 100;
        $uuid = $id;
        if (isset($_POST["pin"]))
	{
               Api::approveTopup($uuid, $token, $ref, $amount, $_POST["pin"]);
        }

        $data = Api::getTopups($uuid, $token, $start, $end, $offset, $limit);
        $dataProvider = new ArrayDataProvider([
                'allModels' => $data,
                'key' => 'id',
                'pagination' => [
                        'pageSize' => 10,
                ],
        ]);
        return $this->render('../topups/index', [
         'dataProvider' => $dataProvider,
         'data' => json_encode($data),
         'pending' => 0
        ]);
    }

    /**
     * Creates a new Topup model.
     * If creation is successful, the browser will be redirected to the 'index' page.
     * @return mixed
     */
    public function actionCreate($id = null, $admin = false)
    {
	$uuid = $admin ? "" : isset($id) ? $id : \Yii::$app->user->identity->uuid;
    	if(!Yii::$app->user->can('admin')) 
    	    return \Yii::$app->getResponse()->redirect( \yii\helpers\Url::to(['/site/admin']) )->send();

        $token = Api::getToken();
	$balance = Api::getBalance($uuid, $token);
        $start = isset($_COOKIE['start']) ? $_COOKIE['start'] : 0;
        $end = isset($_COOKIE['end']) ? $_COOKIE['end'] : 0;
        $offset = 0;
        $limit = 100;
	$info = Api::getInfo($uuid, $token, $start, $end);
        $uuid = isset($id) ? $id : \Yii::$app->user->identity->uuid;
        $model = new Topup();
        $data = Yii::$app->request->post();
        if ($model->load($data, null, false))
        {
                Api::createTopup($uuid, $token, $model['amount'], $model['ref'], $model['type']);
        }
	$pending = Api::getPendingTopups($uuid, $token, $start, $end, $limit);
        $data = Api::getTopups($uuid, $token, $start, $end, $offset, $limit);
        $dataProvider = new ArrayDataProvider([
                'allModels' => $data,
                'key' => 'id',
                'pagination' => [
                        'pageSize' => 10,
                ],
        ]);
        return $this->render('index', [
         'dataProvider' => $dataProvider,
         'data' => json_encode($data),
	 'balance' => $balance,
	 'pending' => $pending,
	 'admin' => true
        ]);
    }


    /**
     * Updates an existing Mytopups model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        if(!Yii::$app->user->can('admin'))
		return \Yii::$app->getResponse()->redirect( \yii\helpers\Url::to(['/site/admin']) )->send();

        $model = $this->findModel($id);
    }

    /**
     * Deletes an existing Mytopups model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
       if(!Yii::$app->user->can('admin'))
            return \Yii::$app->getResponse()->redirect( \yii\helpers\Url::to(['/site/admin']) )->send();
    }

}

